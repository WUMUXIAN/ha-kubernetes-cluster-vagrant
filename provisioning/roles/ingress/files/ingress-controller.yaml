---

apiVersion: v1
kind: Service
metadata:
  # keep it under 24 chars
  name: tds-lb
  namespace: tds-cloud
  labels:
    k8s-app: tds-lb
    component: ingress-controller
spec:
  type: ClusterIP
  selector:
    k8s-app: tds-lb
    component: ingress-controller
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
    - name: https
      protocol: TCP
      port: 443
      targetPort: 443

---

---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: tds-cloud:default
subjects:
  - kind: ServiceAccount
    name: default
    namespace: tds-cloud
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: tds-ingress-controller
  namespace: tds-cloud
  labels:
    k8s-app: tds-lb
    component: ingress-controller
    type: nginx
spec:
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        k8s-app: tds-lb
        component: ingress-controller
        type: nginx
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: node-role.kubernetes.io/master
                operator: DoesNotExist
      containers:
        - name: nginx-ingress-lb
          image: gcr.io/google_containers/nginx-ingress-controller:0.9.0-beta.12
          args:
          - /nginx-ingress-controller
          - --configmap=$(POD_NAMESPACE)/tds-custom-error
          - --default-backend-service=$(POD_NAMESPACE)/default-http-backend
          - --ingress-class=tds
          # use downward API
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
            - name: http
              containerPort: 80
              hostPort: 80
            - name: https
              containerPort: 443
              hostPort: 443
          readinessProbe:
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
          livenessProbe:
            initialDelaySeconds: 10
            timeoutSeconds: 1
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
      hostNetwork: true
      nodeSelector:
        node-role.kubernetes.io/worker: ""
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 60
